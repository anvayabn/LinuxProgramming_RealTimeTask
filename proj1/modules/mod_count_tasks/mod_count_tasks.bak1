#include <linux/module.h>
#include <linux/kallsyms.h>
#define __NR_count_rt_tasks 449
#define SYSCALL_TO_REPLACE __NR_count_rt_tasks
MODULE_LICENSE("GPL");
char *sym_name = "sys_call_table";
unsigned long original_cr0;
typedef asmlinkage long (*sys_call_ptr_t)(const struct pt_regs *);
static sys_call_ptr_t *sys_call_table;
typedef asmlinkage long (*custom_count_rt_tasks) (int* result);

custom_count_rt_tasks old_count_rt_tasks;

static asmlinkage long my_count_rt_tasks(int* result)
{
    printk("I'm the syscall which overwrittes the previous !\n");
    return 0;
}

static int __init hello_init(void)
{
    original_cr0 = read_cr0();
    write_cr0(original_cr0 & ~0x00010000);

    sys_call_table = (sys_call_ptr_t *)kallsyms_lookup_name(sym_name);
    old_count_rt_tasks = (custom_count_rt_tasks)sys_call_table[__NR_count_rt_tasks];
    
    sys_call_table[__NR_count_rt_tasks] = (sys_call_ptr_t)my_count_rt_tasks;
    write_cr0(original_cr0);
    printk("net_malloc: Patched! syscall number : %d\n", SYSCALL_TO_REPLACE);
    return 0;
}

static void __exit hello_exit(void)
{
    original_cr0 = read_cr0();
    write_cr0(original_cr0 & ~0x00010000);
    sys_call_table[__NR_count_rt_tasks] = (sys_call_ptr_t)old_count_rt_tasks;    
    write_cr0(original_cr0);
}

module_init(hello_init);
module_exit(hello_exit);

